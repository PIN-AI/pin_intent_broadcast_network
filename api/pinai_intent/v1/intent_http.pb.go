// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: pinai_intent/v1/intent.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationIntentServiceBroadcastIntent = "/api.pinai_intent.v1.IntentService/BroadcastIntent"
const OperationIntentServiceCreateIntent = "/api.pinai_intent.v1.IntentService/CreateIntent"
const OperationIntentServiceGetIntentStatus = "/api.pinai_intent.v1.IntentService/GetIntentStatus"
const OperationIntentServiceQueryIntents = "/api.pinai_intent.v1.IntentService/QueryIntents"

type IntentServiceHTTPServer interface {
	// BroadcastIntent Broadcast an intent
	BroadcastIntent(context.Context, *BroadcastIntentRequest) (*BroadcastIntentResponse, error)
	// CreateIntent Create a new intent
	CreateIntent(context.Context, *CreateIntentRequest) (*CreateIntentResponse, error)
	// GetIntentStatus Get intent status by ID
	GetIntentStatus(context.Context, *GetIntentStatusRequest) (*GetIntentStatusResponse, error)
	// QueryIntents Query intents with filters
	QueryIntents(context.Context, *QueryIntentsRequest) (*QueryIntentsResponse, error)
}

func RegisterIntentServiceHTTPServer(s *http.Server, srv IntentServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/pinai_intent/intent/create", _IntentService_CreateIntent0_HTTP_Handler(srv))
	r.POST("/pinai_intent/intent/broadcast", _IntentService_BroadcastIntent0_HTTP_Handler(srv))
	r.GET("/pinai_intent/intent/list", _IntentService_QueryIntents0_HTTP_Handler(srv))
	r.GET("/pinai_intent/intent/status", _IntentService_GetIntentStatus0_HTTP_Handler(srv))
}

func _IntentService_CreateIntent0_HTTP_Handler(srv IntentServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateIntentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationIntentServiceCreateIntent)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateIntent(ctx, req.(*CreateIntentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateIntentResponse)
		return ctx.Result(200, reply)
	}
}

func _IntentService_BroadcastIntent0_HTTP_Handler(srv IntentServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BroadcastIntentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationIntentServiceBroadcastIntent)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BroadcastIntent(ctx, req.(*BroadcastIntentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BroadcastIntentResponse)
		return ctx.Result(200, reply)
	}
}

func _IntentService_QueryIntents0_HTTP_Handler(srv IntentServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in QueryIntentsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationIntentServiceQueryIntents)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.QueryIntents(ctx, req.(*QueryIntentsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QueryIntentsResponse)
		return ctx.Result(200, reply)
	}
}

func _IntentService_GetIntentStatus0_HTTP_Handler(srv IntentServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetIntentStatusRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationIntentServiceGetIntentStatus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetIntentStatus(ctx, req.(*GetIntentStatusRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetIntentStatusResponse)
		return ctx.Result(200, reply)
	}
}

type IntentServiceHTTPClient interface {
	BroadcastIntent(ctx context.Context, req *BroadcastIntentRequest, opts ...http.CallOption) (rsp *BroadcastIntentResponse, err error)
	CreateIntent(ctx context.Context, req *CreateIntentRequest, opts ...http.CallOption) (rsp *CreateIntentResponse, err error)
	GetIntentStatus(ctx context.Context, req *GetIntentStatusRequest, opts ...http.CallOption) (rsp *GetIntentStatusResponse, err error)
	QueryIntents(ctx context.Context, req *QueryIntentsRequest, opts ...http.CallOption) (rsp *QueryIntentsResponse, err error)
}

type IntentServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewIntentServiceHTTPClient(client *http.Client) IntentServiceHTTPClient {
	return &IntentServiceHTTPClientImpl{client}
}

func (c *IntentServiceHTTPClientImpl) BroadcastIntent(ctx context.Context, in *BroadcastIntentRequest, opts ...http.CallOption) (*BroadcastIntentResponse, error) {
	var out BroadcastIntentResponse
	pattern := "/pinai_intent/intent/broadcast"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationIntentServiceBroadcastIntent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *IntentServiceHTTPClientImpl) CreateIntent(ctx context.Context, in *CreateIntentRequest, opts ...http.CallOption) (*CreateIntentResponse, error) {
	var out CreateIntentResponse
	pattern := "/pinai_intent/intent/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationIntentServiceCreateIntent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *IntentServiceHTTPClientImpl) GetIntentStatus(ctx context.Context, in *GetIntentStatusRequest, opts ...http.CallOption) (*GetIntentStatusResponse, error) {
	var out GetIntentStatusResponse
	pattern := "/pinai_intent/intent/status"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationIntentServiceGetIntentStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *IntentServiceHTTPClientImpl) QueryIntents(ctx context.Context, in *QueryIntentsRequest, opts ...http.CallOption) (*QueryIntentsResponse, error) {
	var out QueryIntentsResponse
	pattern := "/pinai_intent/intent/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationIntentServiceQueryIntents))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
