syntax = "proto3";

package api.pinai_intent.v1;

import "google/api/annotations.proto";

option go_package = "github.com/pin-project/pin_intent_broadcast_network/api/pinai_intent/v1;v1";

// Tag represents a data access requirement with fee and tradability information
message Tag {
  string tag_name = 1;      // Name of the data tag (e.g., "shopping_history")
  string tag_fee = 2;       // Access fee in Octa (Aptos native token smallest unit)
  bool is_tradable = 3;     // Whether this tag can be requested by agents
}

// IntentManifest describes the intent task and requirements
message IntentManifest {
  string task = 1;          // Human readable task description
  map<string, string> requirements = 2; // Additional task requirements
  string context = 3;       // Optional context information
}

// Intent status enumeration
enum IntentStatus {
  INTENT_STATUS_UNSPECIFIED = 0;
  INTENT_STATUS_CREATED = 1;
  INTENT_STATUS_VALIDATED = 2;
  INTENT_STATUS_BROADCASTED = 3;
  INTENT_STATUS_PROCESSED = 4;
  INTENT_STATUS_MATCHED = 5;
  INTENT_STATUS_COMPLETED = 6;
  INTENT_STATUS_FAILED = 7;
  INTENT_STATUS_EXPIRED = 8;
}

// Intent message structure
message Intent {
  string id = 1;
  string type = 2;
  bytes payload = 3;
  int64 timestamp = 4;
  string sender_id = 5;
  bytes signature = 6;
  string signature_algorithm = 7;
  map<string, string> metadata = 8;
  IntentStatus status = 9;
  int32 priority = 10;
  int64 ttl = 11;
  int64 processed_at = 12;
  string error = 13;
  string user_address = 14;         // User's Aptos address
  IntentManifest intent_manifest = 15; // Intent description and requirements
  repeated Tag relevant_tags = 16;  // List of required data tags
  int64 max_duration = 17;         // Intent validity duration in seconds
}

// CreateIntent request message
message CreateIntentRequest {
  string type = 1;
  bytes payload = 2;
  string sender_id = 3;
  map<string, string> metadata = 4;
  int32 priority = 5;
  int64 ttl = 6;
  string user_address = 7;         // User's Aptos address
  IntentManifest intent_manifest = 8; // Intent description and requirements
  repeated Tag relevant_tags = 9;  // List of required data tags
  int64 max_duration = 10;        // Intent validity duration in seconds
}

// CreateIntent response message
message CreateIntentResponse {
  Intent intent = 1;
  bool success = 2;
  string message = 3;
}

// BroadcastIntent request message
message BroadcastIntentRequest {
  string intent_id = 1;
  string topic = 2;
}

// BroadcastIntent response message
message BroadcastIntentResponse {
  bool success = 1;
  string intent_id = 2;
  string topic = 3;
  string message = 4;
}

// QueryIntents request message
message QueryIntentsRequest {
  string type = 1;
  IntentStatus status = 2;
  int64 start_time = 3;
  int64 end_time = 4;
  int32 limit = 5;
  int32 offset = 6;
}

// QueryIntents response message
message QueryIntentsResponse {
  repeated Intent intents = 1;
  int32 total = 2;
}

// GetIntentStatus request message
message GetIntentStatusRequest {
  string intent_id = 1;
}

// GetIntentStatus response message
message GetIntentStatusResponse {
  Intent intent = 1;
}

// Intent service definition
service IntentService {
  // Create a new intent
  rpc CreateIntent(CreateIntentRequest) returns (CreateIntentResponse) {
    option (google.api.http) = {
      post: "/pinai_intent/intent/create"
      body: "*"
    };
  }

  // Broadcast an intent
  rpc BroadcastIntent(BroadcastIntentRequest) returns (BroadcastIntentResponse) {
    option (google.api.http) = {
      post: "/pinai_intent/intent/broadcast"
      body: "*"
    };
  }

  // Query intents with filters
  rpc QueryIntents(QueryIntentsRequest) returns (QueryIntentsResponse) {
    option (google.api.http) = {
      get: "/pinai_intent/intent/list"
    };
  }

  // Get intent status by ID
  rpc GetIntentStatus(GetIntentStatusRequest) returns (GetIntentStatusResponse) {
    option (google.api.http) = {
      get: "/pinai_intent/intent/status"
    };
  }
}

// Service Agent status and metrics
message AgentStatus {
  string agent_id = 1;
  string agent_type = 2;
  string status = 3;          // "active", "busy", "offline"
  int32 active_intents = 4;
  int64 processed_intents = 5;
  int64 successful_bids = 6;
  string total_earnings = 7;
  int64 last_activity = 8;
  int32 connected_peers = 9;
}

message AgentConfig {
  string agent_id = 1;
  string agent_type = 2;
  string name = 3;
  string description = 4;
  repeated string capabilities = 5;
  repeated string specializations = 6;
  BidStrategy bid_strategy = 7;
  int32 max_concurrent_intents = 8;
  string min_bid_amount = 9;
  string max_bid_amount = 10;
  IntentFilter intent_filter = 11;
}

message BidStrategy {
  string type = 1;              // "conservative", "aggressive", "balanced"
  string base_fee = 2;
  double profit_margin = 3;
  double risk_factor = 4;
}

message IntentFilter {
  repeated string allowed_types = 1;
  repeated string blocked_types = 2;
  repeated string allowed_senders = 3;
  repeated string blocked_senders = 4;
  int32 min_priority = 5;
  int32 max_priority = 6;
  repeated string required_tags = 7;
}

// Block Builder status and metrics
message BlockBuilderStatus {
  string builder_id = 1;
  string status = 2;            // "active", "busy", "offline"
  int32 active_sessions = 3;
  int64 completed_matches = 4;
  int64 total_bids_received = 5;
  int64 last_activity = 6;
  int32 connected_peers = 7;
}

message BlockBuilderConfig {
  string builder_id = 1;
  string matching_algorithm = 2;    // "highest_bid", "reputation_weighted", "random"
  string settlement_mode = 3;       // "simulated", "blockchain"
  int64 bid_collection_window_ms = 4;
  int32 max_concurrent_intents = 5;
  int32 min_bids_required = 6;
}

message BidMessage {
  string intent_id = 1;
  string agent_id = 2;
  string bid_amount = 3;
  repeated string capabilities = 4;
  int64 timestamp = 5;
  string agent_type = 6;
  map<string, string> metadata = 7;
}

message MatchResult {
  string intent_id = 1;
  string winning_agent = 2;
  string winning_bid = 3;
  int32 total_bids = 4;
  int64 matched_at = 5;
  string status = 6;
  string block_builder_id = 7;
  map<string, string> metadata = 8;
}

// Execution API Messages
message GetAgentsStatusRequest {}

message GetAgentsStatusResponse {
  repeated AgentStatus agents = 1;
  int32 total_agents = 2;
  bool success = 3;
  string message = 4;
}

message GetBuildersStatusRequest {}

message GetBuildersStatusResponse {
  repeated BlockBuilderStatus builders = 1;
  int32 total_builders = 2;
  bool success = 3;
  string message = 4;
}

message GetExecutionMetricsRequest {}

message ExecutionMetrics {
  int64 total_intents_processed = 1;
  int64 total_bids_submitted = 2;
  int64 total_matches_completed = 3;
  double success_rate = 4;
  int64 average_response_time_ms = 5;
  int32 active_agents = 6;
  int32 active_builders = 7;
  int64 last_updated = 8;
}

message GetExecutionMetricsResponse {
  ExecutionMetrics metrics = 1;
  bool success = 2;
  string message = 3;
}

message StartAgentRequest {
  string agent_id = 1;
}

message StartAgentResponse {
  bool success = 1;
  string message = 2;
  string agent_id = 3;
}

message StopAgentRequest {
  string agent_id = 1;
}

message StopAgentResponse {
  bool success = 1;
  string message = 2;
  string agent_id = 3;
}

message StartBuilderRequest {
  string builder_id = 1;
}

message StartBuilderResponse {
  bool success = 1;
  string message = 2;
  string builder_id = 3;
}

message StopBuilderRequest {
  string builder_id = 1;
}

message StopBuilderResponse {
  bool success = 1;
  string message = 2;
  string builder_id = 3;
}

message GetActiveBidsRequest {
  string intent_id = 1;
}

message GetActiveBidsResponse {
  repeated BidMessage bids = 1;
  bool success = 2;
  string message = 3;
}

message GetMatchHistoryRequest {
  int64 start_time = 1;
  int64 end_time = 2;
  int32 limit = 3;
  int32 offset = 4;
}

message GetMatchHistoryResponse {
  repeated MatchResult matches = 1;
  int32 total = 2;
  bool success = 3;
  string message = 4;
}

// Intent Execution Service
service IntentExecutionService {
  // Get all service agents status
  rpc GetAgentsStatus(GetAgentsStatusRequest) returns (GetAgentsStatusResponse) {
    option (google.api.http) = {
      get: "/pinai_intent/execution/agents/status"
    };
  }

  // Get all block builders status
  rpc GetBuildersStatus(GetBuildersStatusRequest) returns (GetBuildersStatusResponse) {
    option (google.api.http) = {
      get: "/pinai_intent/execution/builders/status"
    };
  }

  // Get overall execution metrics
  rpc GetExecutionMetrics(GetExecutionMetricsRequest) returns (GetExecutionMetricsResponse) {
    option (google.api.http) = {
      get: "/pinai_intent/execution/metrics"
    };
  }

  // Start a specific agent
  rpc StartAgent(StartAgentRequest) returns (StartAgentResponse) {
    option (google.api.http) = {
      post: "/pinai_intent/execution/agents/{agent_id}/start"
      body: "*"
    };
  }

  // Stop a specific agent
  rpc StopAgent(StopAgentRequest) returns (StopAgentResponse) {
    option (google.api.http) = {
      post: "/pinai_intent/execution/agents/{agent_id}/stop"
      body: "*"
    };
  }

  // Start a specific builder
  rpc StartBuilder(StartBuilderRequest) returns (StartBuilderResponse) {
    option (google.api.http) = {
      post: "/pinai_intent/execution/builders/{builder_id}/start"
      body: "*"
    };
  }

  // Stop a specific builder
  rpc StopBuilder(StopBuilderRequest) returns (StopBuilderResponse) {
    option (google.api.http) = {
      post: "/pinai_intent/execution/builders/{builder_id}/stop"
      body: "*"
    };
  }

  // Get active bids for an intent
  rpc GetActiveBids(GetActiveBidsRequest) returns (GetActiveBidsResponse) {
    option (google.api.http) = {
      get: "/pinai_intent/execution/intents/{intent_id}/bids"
    };
  }

  // Get match history
  rpc GetMatchHistory(GetMatchHistoryRequest) returns (GetMatchHistoryResponse) {
    option (google.api.http) = {
      get: "/pinai_intent/execution/matches/history"
    };
  }
}