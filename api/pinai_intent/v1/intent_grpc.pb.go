// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: pinai_intent/v1/intent.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IntentService_CreateIntent_FullMethodName    = "/api.pinai_intent.v1.IntentService/CreateIntent"
	IntentService_BroadcastIntent_FullMethodName = "/api.pinai_intent.v1.IntentService/BroadcastIntent"
	IntentService_QueryIntents_FullMethodName    = "/api.pinai_intent.v1.IntentService/QueryIntents"
	IntentService_GetIntentStatus_FullMethodName = "/api.pinai_intent.v1.IntentService/GetIntentStatus"
)

// IntentServiceClient is the client API for IntentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Intent service definition
type IntentServiceClient interface {
	// Create a new intent
	CreateIntent(ctx context.Context, in *CreateIntentRequest, opts ...grpc.CallOption) (*CreateIntentResponse, error)
	// Broadcast an intent
	BroadcastIntent(ctx context.Context, in *BroadcastIntentRequest, opts ...grpc.CallOption) (*BroadcastIntentResponse, error)
	// Query intents with filters
	QueryIntents(ctx context.Context, in *QueryIntentsRequest, opts ...grpc.CallOption) (*QueryIntentsResponse, error)
	// Get intent status by ID
	GetIntentStatus(ctx context.Context, in *GetIntentStatusRequest, opts ...grpc.CallOption) (*GetIntentStatusResponse, error)
}

type intentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIntentServiceClient(cc grpc.ClientConnInterface) IntentServiceClient {
	return &intentServiceClient{cc}
}

func (c *intentServiceClient) CreateIntent(ctx context.Context, in *CreateIntentRequest, opts ...grpc.CallOption) (*CreateIntentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateIntentResponse)
	err := c.cc.Invoke(ctx, IntentService_CreateIntent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intentServiceClient) BroadcastIntent(ctx context.Context, in *BroadcastIntentRequest, opts ...grpc.CallOption) (*BroadcastIntentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BroadcastIntentResponse)
	err := c.cc.Invoke(ctx, IntentService_BroadcastIntent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intentServiceClient) QueryIntents(ctx context.Context, in *QueryIntentsRequest, opts ...grpc.CallOption) (*QueryIntentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryIntentsResponse)
	err := c.cc.Invoke(ctx, IntentService_QueryIntents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intentServiceClient) GetIntentStatus(ctx context.Context, in *GetIntentStatusRequest, opts ...grpc.CallOption) (*GetIntentStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIntentStatusResponse)
	err := c.cc.Invoke(ctx, IntentService_GetIntentStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IntentServiceServer is the server API for IntentService service.
// All implementations must embed UnimplementedIntentServiceServer
// for forward compatibility.
//
// Intent service definition
type IntentServiceServer interface {
	// Create a new intent
	CreateIntent(context.Context, *CreateIntentRequest) (*CreateIntentResponse, error)
	// Broadcast an intent
	BroadcastIntent(context.Context, *BroadcastIntentRequest) (*BroadcastIntentResponse, error)
	// Query intents with filters
	QueryIntents(context.Context, *QueryIntentsRequest) (*QueryIntentsResponse, error)
	// Get intent status by ID
	GetIntentStatus(context.Context, *GetIntentStatusRequest) (*GetIntentStatusResponse, error)
	mustEmbedUnimplementedIntentServiceServer()
}

// UnimplementedIntentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIntentServiceServer struct{}

func (UnimplementedIntentServiceServer) CreateIntent(context.Context, *CreateIntentRequest) (*CreateIntentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIntent not implemented")
}
func (UnimplementedIntentServiceServer) BroadcastIntent(context.Context, *BroadcastIntentRequest) (*BroadcastIntentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastIntent not implemented")
}
func (UnimplementedIntentServiceServer) QueryIntents(context.Context, *QueryIntentsRequest) (*QueryIntentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryIntents not implemented")
}
func (UnimplementedIntentServiceServer) GetIntentStatus(context.Context, *GetIntentStatusRequest) (*GetIntentStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIntentStatus not implemented")
}
func (UnimplementedIntentServiceServer) mustEmbedUnimplementedIntentServiceServer() {}
func (UnimplementedIntentServiceServer) testEmbeddedByValue()                       {}

// UnsafeIntentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IntentServiceServer will
// result in compilation errors.
type UnsafeIntentServiceServer interface {
	mustEmbedUnimplementedIntentServiceServer()
}

func RegisterIntentServiceServer(s grpc.ServiceRegistrar, srv IntentServiceServer) {
	// If the following call pancis, it indicates UnimplementedIntentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IntentService_ServiceDesc, srv)
}

func _IntentService_CreateIntent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIntentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntentServiceServer).CreateIntent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntentService_CreateIntent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntentServiceServer).CreateIntent(ctx, req.(*CreateIntentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntentService_BroadcastIntent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastIntentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntentServiceServer).BroadcastIntent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntentService_BroadcastIntent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntentServiceServer).BroadcastIntent(ctx, req.(*BroadcastIntentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntentService_QueryIntents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIntentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntentServiceServer).QueryIntents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntentService_QueryIntents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntentServiceServer).QueryIntents(ctx, req.(*QueryIntentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntentService_GetIntentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIntentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntentServiceServer).GetIntentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntentService_GetIntentStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntentServiceServer).GetIntentStatus(ctx, req.(*GetIntentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IntentService_ServiceDesc is the grpc.ServiceDesc for IntentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IntentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.pinai_intent.v1.IntentService",
	HandlerType: (*IntentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIntent",
			Handler:    _IntentService_CreateIntent_Handler,
		},
		{
			MethodName: "BroadcastIntent",
			Handler:    _IntentService_BroadcastIntent_Handler,
		},
		{
			MethodName: "QueryIntents",
			Handler:    _IntentService_QueryIntents_Handler,
		},
		{
			MethodName: "GetIntentStatus",
			Handler:    _IntentService_GetIntentStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pinai_intent/v1/intent.proto",
}
